name: Deploy application

on:
  workflow_call:
    inputs:  
      version:
        type: string
        required: true
        description: "Version of application. Tag from github"
      container_name:
        type: string
        required: true
        description: "Name of container"
      current_branch:
        type: string
        required: true
        description: "Name of current branch"
    secrets:
      DOCKER_USERNAME:
        required: true
        description: "Docker hub username"
  
env:
  TAG: ${{ inputs.version || 'latest' }}
  CONTAINER_NAME: ${{ inputs.container_name || format('land_devops:v{0}', inputs.version)}}
  PROD_ENV: "prod.env"
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ inputs.container_name}}:${{ inputs.version }} 
  LABEL_PROD: "PROD"
  LABEL_EX_PROD: "EX_PROD"

jobs: 
  deploy-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev,test,stage]
    steps:
      - name: Deploy to stands
        run: echo "Start on ${{ matrix.environment }}"

  deploy-prod: 
    environment: prod
    runs-on: [self-hosted, windows]
    name: PROD
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
    steps:
      - name: Checkout on release branch
        uses: actions/checkout@v4
  
      - name: List data about container 
        run: | 
          docker ps -a 
          docker image ls
      
      - name: Create .ENV
        shell: powershell
        run : |
          New-Item ${{ env.PROD_ENV }} -ItemType file -Force
          Add-Content ${{ env.PROD_ENV }} "VERSION=${{ env.TAG }}"
          Add-Content ${{ env.PROD_ENV }} "CONTAINER_NAME=${{ env.CONTAINER_NAME }}"
          Add-Content ${{ env.PROD_ENV }} "DOCKER_HUB_IMAGE = ${{ env.IMAGE_NAME }}"

      - name: Run container ${{ env.IMAGE_NAME }} for file ${{ env.PROD_ENV }}
        run: |  
          docker-compose -f docker-compose.yaml --env-file ${{ env.PROD_ENV }} up -d 

  change-label:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    steps: 
    -   name: Add label to PR
        uses: actions/github-script@v7
        with:
          script: |
            try {
              if (context.issue && context.issue.number) {
                github.rest.issues.addLabels({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['${{ env.LABEL_PROD }}']
                });
                console.log('Added production label to issue/PR #' + context.issue.number);
              } else {
                console.log('No issue or PR number found in context. Skipping label addition.');
              }
            } catch (error) {
              console.error('Error adding label:', error.message);
            }

  create-release: 
    name: Create release 
    needs: [change-label]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          body: |
            #### About the application 
            > ${{ github.event.repository.description }}

            #### Tasks list
            Features: 
              - ${{ inputs.current_branch }}
            Bugs: 
              - None

            #### Build Information
             - PR Number: `${{ github.event.number }}`
             - Dockerhub: https://hub.docker.com/repositories/${{ secrets.DOCKER_USERNAME }}

            #### How to run 
            ```
              git clone <special tag>
              docker-compose -f docker-compose.yaml --env-file <special file> up -d 
            ```
            
            This release has been deployed on the production environment and is stable.
          draft: false
          prerelease: false
